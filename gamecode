<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Space Invaders Style Game</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
        }

        canvas {
            display: block;
            background: black;
        }

        #gameOver {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 24px;
            text-align: center;
            display: none;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas"></canvas>
    <div id="gameOver">
        <p>Game Over</p>
        <p>Press <strong>R</strong> to Restart</p>
    </div>
    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        const starCount = 100;
        const stars = [];
        const bullets = [];
        let score = 0;
        let lives = 3;
        let gameOver = false;
        let machineGunMode = false;

        // Spaceship properties
        const spaceship = {
            x: canvas.width / 2,
            y: canvas.height - 100,
            width: 40,
            height: 40,
            dx: 0,
            speed: 5
        };

        // Enemy ship properties
        const enemies = [];
        const enemySpeed = 3;

        // Key control states
        const keys = {
            ArrowLeft: false,
            ArrowRight: false,
            Space: false
        };

        // Initialize stars
        for (let i = 0; i < starCount; i++) {
            stars.push({
                x: Math.random() * canvas.width,
                y: Math.random() * canvas.height,
                size: Math.random() * 2,
                speed: Math.random() * 2 + 1
            });
        }

        // Create enemy ships
        function spawnEnemy() {
            const x = Math.random() * (canvas.width - 50);
            enemies.push({
                x: x,
                y: -50,
                width: 40,
                height: 40
            });
        }

        // Draw stars
        function drawStars() {
            ctx.fillStyle = 'white';
            stars.forEach(star => {
                ctx.beginPath();
                ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);
                ctx.fill();
            });
        }

        // Update star positions
        function updateStars() {
            stars.forEach(star => {
                star.y += star.speed;
                if (star.y > canvas.height) {
                    star.y = 0;
                    star.x = Math.random() * canvas.width;
                }
            });
        }

        // Draw the spaceship
        function drawSpaceship() {
            ctx.fillStyle = 'blue';
            ctx.fillRect(spaceship.x, spaceship.y, spaceship.width, spaceship.height);
        }

        // Draw bullets
        function drawBullets() {
            ctx.fillStyle = 'yellow';
            bullets.forEach(bullet => {
                ctx.fillRect(bullet.x, bullet.y, bullet.width, bullet.height);
            });
        }

        // Update bullet positions
        function updateBullets() {
            bullets.forEach((bullet, index) => {
                bullet.y -= bullet.speed;

                // Remove bullets that go off screen
                if (bullet.y < 0) {
                    bullets.splice(index, 1);
                }

                // Check for collisions with enemies
                enemies.forEach((enemy, enemyIndex) => {
                    if (
                        bullet.x < enemy.x + enemy.width &&
                        bullet.x + bullet.width > enemy.x &&
                        bullet.y < enemy.y + enemy.height &&
                        bullet.y + bullet.height > enemy.y
                    ) {
                        // Remove enemy and bullet
                        enemies.splice(enemyIndex, 1);
                        bullets.splice(index, 1);
                        score += 10;
                    }
                });
            });
        }

        // Fire bullets
        function fireBullet() {
            bullets.push({
                x: spaceship.x + spaceship.width / 2 - 2.5,
                y: spaceship.y,
                width: 5,
                height: 10,
                speed: 7
            });
        }

        // Draw the enemies
        function drawEnemies() {
            ctx.fillStyle = 'red';
            enemies.forEach(enemy => {
                ctx.fillRect(enemy.x, enemy.y, enemy.width, enemy.height);
            });
        }

        // Update enemy positions
        function updateEnemies() {
            enemies.forEach(enemy => {
                enemy.y += enemySpeed;

                // Check collision with spaceship
                if (
                    enemy.x < spaceship.x + spaceship.width &&
                    enemy.x + enemy.width > spaceship.x &&
                    enemy.y < spaceship.y + spaceship.height &&
                    enemy.y + enemy.height > spaceship.y
                ) {
                    lives--;
                    enemy.y = canvas.height + 100; // Remove enemy from view
                }

                // Remove enemies that go off screen
                if (enemy.y > canvas.height) {
                    enemies.splice(enemies.indexOf(enemy), 1);
                }
            });
        }

        // Update spaceship position
        function updateSpaceship() {
            if (keys.ArrowLeft && spaceship.x > 0) {
                spaceship.dx = -spaceship.speed;
            } else if (keys.ArrowRight && spaceship.x < canvas.width - spaceship.width) {
                spaceship.dx = spaceship.speed;
            } else {
                spaceship.dx = 0;
            }

            spaceship.x += spaceship.dx;
        }

        // Draw score and lives
        function drawHUD() {
            ctx.fillStyle = 'white';
            ctx.font = '20px Arial';
            ctx.fillText(`Score: ${score}`, 20, 30);
            ctx.fillText(`Lives: ${lives}`, 20, 60);
        }

        // Handle game over
        function checkGameOver() {
            if (lives <= 0) {
                gameOver = true;
                document.getElementById('gameOver').style.display = 'block';
            }
        }

        // Restart the game
        function restartGame() {
            score = 0;
            lives = 3;
            enemies.length = 0;
            bullets.length = 0;
            gameOver = false;
            document.getElementById('gameOver').style.display = 'none';
        }

        // Main game loop
        function gameLoop() {
            if (!gameOver) {
                ctx.clearRect(0, 0, canvas.width, canvas.height);

                drawStars();
                updateStars();

                drawSpaceship();
                updateSpaceship();

                drawEnemies();
                updateEnemies();

                drawBullets();
                updateBullets();

                drawHUD();
                checkGameOver();

                requestAnimationFrame(gameLoop);
            }
        }

        // Handle keyboard input
        document.addEventListener('keydown', e => {
            if (e.code in keys) keys[e.code] = true;
            if (e.code === 'KeyR' && gameOver) restartGame();
            if (e.code === 'Space' && !gameOver) {
                machineGunMode = true;
            }
        });

        document.addEventListener('keyup', e => {
            if (e.code in keys) keys[e.code] = false;
            if (e.code === 'Space') {
                machineGunMode = false;
            }
        });

        // Machine gun mode interval
        setInterval(() => {
            if (machineGunMode && !gameOver) {
                fireBullet();
            }
        }, 100);

        // Spawn enemies at intervals
        setInterval(spawnEnemy, 1000);

        // Start the game
        gameLoop();
    </script>
</body>
</html>
